#!/bin/bash -
: ${FIREWALLA_HOME:=/home/pi/firewalla}

# use github to pull node modules to ~/.node_modules
export FIREWALLA_NODE_MODULES_MODE=GIT
CPU_PLATFORM=$(uname -m)

if [[ $CPU_PLATFORM == "x86_64" ]]; then
    export NODE_MODULE_REPO=https://github.com/firewalla/firewalla_nodemodules.x86_64.git
else
    export NODE_MODULE_REPO=https://github.com/firewalla/firewalla_nodemodules.git
fi

export NODE_PATH=~/.node_modules:$NODE_PATH

mkdir -p "$HOME/.firewalla"
sudo rm -r -f /tmp/*
cd $FIREWALLA_HOME
branch=$(git rev-parse --abbrev-ref HEAD)
if [[ $branch =~ release.* ]]; then
     export FWPRODUCTION=$branch
fi

CPU_PLATFORM=$(uname -m)


logger "FIREWALLA: Main-Run Start Update Modules"
function update_node_modules {
  FW_NODE_MODULES_PATH=~/.node_modules
  if [[ "x$FIREWALLA_NODE_MODULES_MODE" == "xGIT" ]]; then
      if [[ ! -d $FW_NODE_MODULES_PATH ]]; then
        cd
        # try again if failed, in case network issue
        git clone --recursive -b $branch --single-branch $NODE_MODULE_REPO $FW_NODE_MODULES_PATH || git clone --recursive -b $branch --single-branch $NODE_MODULE_REPO $FW_NODE_MODULES_PATH
        cd - &>/dev/null
      fi
      REVISION_FILE=$FIREWALLA_HOME/scripts/NODE_MODULES_REVISION.$CPU_PLATFORM
      if [[ -d $FW_NODE_MODULES_PATH && -f $REVISION_FILE ]]; then
        cd $FW_NODE_MODULES_PATH

        EXPECTED_REVISION=$(cat $REVISION_FILE)
        CURRENT_REVISION=$(git log | head -n 1 | awk '{print $2}')

        # only reset head when there is new expected revision number
        # this is to reduce the freq of calling 'git reset'
        if [[ $EXPECTED_REVISION != $CURRENT_REVISION ]]; then
            git fetch origin  || git fetch origin
            git reset -q --hard `cat $REVISION_FILE`
            if [[ -n $FWPRODUCTION ]]; then
                git clean -xdf # clean up all untracking files in node modules repo
                # only clean untrack files in production mode
            fi
        fi
        cd - &>/dev/null
      fi
  fi
}

# update ~/.node_modules
update_node_modules
logger "FIREWALLA: Main-Run Finish Update Modules "

cd /tmp 
if [ ! -f $FIREWALLA_HOME/bin/dev ]; then
  if [[ $branch =~ release.* ]]
    then
     export FWPRODUCTION=$branch
     cp $FIREWALLA_HOME/bin/real/bitbridge4 $FIREWALLA_HOME/bin/.
     cp $FIREWALLA_HOME/bin/mock/bitbridge6 $FIREWALLA_HOME/bin/.
     cat $FWPRODUCTION > /tmp/FWPRODUCTION
     sudo rm -r -f /home/pi/.forever/*
    else
     cp $FIREWALLA_HOME/bin/real/bitbridge4 $FIREWALLA_HOME/bin/.
     cp $FIREWALLA_HOME/bin/real/bitbridge6 $FIREWALLA_HOME/bin/.
     rm /tmp/FWPRODUCTION
  fi
else
     cp $FIREWALLA_HOME/bin/mock/* $FIREWALLA_HOME/bin/.
     rm /tmp/FWPRODUCTION
fi

#For testing only
#export FWPRODUCTION=$branch
#cat $FWPRODUCTION > /tmp/FWPRODUCTION

nohup sudo ~/firewalla/bin/bitbridge6 -R -l eth0 &
sudo ip6tables -I OUTPUT -p icmpv6 --icmpv6-type redirect -j DROP

cd $FIREWALLA_HOME

if [[ ! -f $FIREWALLA_HOME/node_modules/bleno/package.json && ! -f ~/.node_modules/bleno/package.json ]]; then
    echo "Updating NPM BLENO"
    sudo cp $FIREWALLA_HOME/config/netbot.config /encipher.config/.
    sudo apt-get install -y bluetooth bluez libbluetooth-dev libudev-dev
    npm install bleno --save
    sudo setcap cap_net_raw+eip $(eval readlink -f `which nodejs`)
fi

function check_upgrade {
    PACKAGE_NAME=$1
    PACKAGE_VERSION=$2
    if [[ ! -f $FIREWALLA_HOME/node_modules/$PACKAGE_NAME/package.json && ! -f ~/.node_modules/$PACKAGE_NAME/package.json ]]; then
        echo "Updating NPM $PACKAGE_NAME"
        npm install $PACKAGE_NAME@$PACKAGE_VERSION
    fi
}

if [[ "$branch" == "release_pi_1_0" ]]; then
  check_upgrade external-ip ^0.2.4
  check_upgrade jsonfile ^2.4.0
  check_upgrade lodash ^4.17.2
  check_upgrade random-seed 0.3.0
  check_upgrade pty.js 0.3.1
  check_upgrade stats-lite 2.0.3
  check_upgrade cron 1.1.0
  check_upgrade nat-pmp 1.0.0
  check_upgrade nat-upnp 1.0.3
  check_upgrade mobile-detect 1.3.3
  check_upgrade socket.io-client 1.4.8
  check_upgrade swagger-node-express ~2.0
  check_upgrade minimist 1.2.x
  check_upgrade express ^4.14.0
  check_upgrade body-parser 1.9.x
  check_upgrade passport 0.3.2
  check_upgrade passport-http-bearer 1.0.1
  check_upgrade debug 2.2.0
  check_upgrade serve-favicon 2.3.0
  check_upgrade jade 1.11.0
fi

if ! fgrep '"version": "0.3.1",' $FIREWALLA_HOME/node_modules/network/package.json && ! fgrep '"version": "0.3.1",' ~/.node_modules/network/package.json &>/dev/null; then
    npm install network@git+https://git@github.com/melvinto/network.git
fi

sudo setcap cap_net_raw+eip $(eval readlink -f `which nodejs`)

#reload services
if [[ ! -f /.dockerenv ]]; then
    sudo cp /home/pi/firewalla/etc/brofish.service /etc/systemd/system/.
    sudo cp /home/pi/firewalla/etc/firewalla.service /etc/systemd/system/.
    sudo cp /home/pi/firewalla/etc/firemon.service /etc/systemd/system/.
    sudo cp /home/pi/firewalla/etc/firekick.service /etc/systemd/system/.
    sudo cp /home/pi/firewalla/etc/fireui.service /etc/systemd/system/.
    sudo cp /home/pi/firewalla/etc/fireapi.service /etc/systemd/system/.
    sudo systemctl daemon-reload
fi

cd net2
forever start  -a --uid main  -c "/usr/bin/node --expose-gc"  ./main.js
cd ..
cd sys
#forever start  --uid ui kickstart.js --config /encipher.config/netbot.config
#forever start --uid kickstart -a -l ui.log  -c '/usr/bin/nodejs --expose-gc' ./kickstart.js --config /encipher.config/netbot.config

if [[ -f /.dockerenv ]]; then
    forever start  -a --uid ui kickstart.js --config /encipher.config/netbot.config
else
    sudo systemctl start firekick
fi

cd ..
cd monitor
#forever start --uid monitor -c "/usr/bin/node --expose-gc" ./MonitorMain.js 
#forever start --uid monitor MonitorMain.js
if [[ -f /.dockerenv ]]; then
    forever start -a --uid monitor MonitorMain.js
else
    sudo systemctl start firemon
fi
cd ..
cd api
# no longer need to start api here
#sudo systemctl start fireapi
cd ..

sudo /usr/local/bro/bin/broctl cron
sudo /usr/local/bro/bin/broctl cron enable
sync

if [[ ! -f /.dockerenv ]]; then
    sudo systemctl start ntp
    sudo ntpd -gq
    sudo ntpdate -s time.nist.gov
    sudo systemctl start ntp
    sync
fi
