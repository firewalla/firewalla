From c5938f97b8b515e7e2bd98d2b5c7cab44b0449c0 Mon Sep 17 00:00:00 2001
From: Yuchen Liu <jasonlyc.sjtu@gmail.com>
Date: Thu, 29 Dec 2022 16:00:44 +0800
Subject: [PATCH] only allocate necessary ipsets for region category

---
 control/Block.js               | 244 +++++++++++++++++----------------
 control/CategoryUpdaterBase.js | 112 +++++++--------
 control/CountryUpdater.js      |   4 +-
 3 files changed, 182 insertions(+), 178 deletions(-)

diff --git a/control/Block.js b/control/Block.js
index fce7efafc..d3d5d09a3 100644
--- a/control/Block.js
+++ b/control/Block.js
@@ -178,7 +178,7 @@ function getDropChain(security, tls) {
   return `FW_${security ? "SEC_" : ""}${tls ? "TLS_" : ""}DROP`;
 }
 
-async function setupCategoryEnv(category, dstType = "hash:ip", hashSize = 128, needComment = false) {
+async function setupCategoryEnv(category, dstType = "hash:ip", hashSize = 128, needComment = false, isCountry = false) {
   let commentIndicator = "";
   if (needComment) {
     commentIndicator = "comment";
@@ -196,134 +196,138 @@ async function setupCategoryEnv(category, dstType = "hash:ip", hashSize = 128, n
   const ipset6 = categoryUpdater.getIPSetNameForIPV6(category);
   const tempIpset6 = categoryUpdater.getTempIPSetNameForIPV6(category);
 
-  const staticIpset = categoryUpdater.getIPSetName(category, true);
-  const tempStaticIpset = categoryUpdater.getTempIPSetName(category, true);
-  const staticIpset6 = categoryUpdater.getIPSetNameForIPV6(category, true);
-  const tempStaticIpset6 = categoryUpdater.getTempIPSetNameForIPV6(category, true);
-
-  const netPortIpset = categoryUpdater.getNetPortIPSetName(category);
-  const tempNetPortIpset = categoryUpdater.getTempNetPortIPSetName(category);
-  const netPortIpset6 = categoryUpdater.getNetPortIPSetNameForIPV6(category);
-  const tempNetPortIpset6 = categoryUpdater.getTempNetPortIPSetNameForIPV6(category);
-
-  const domainPortIpset = categoryUpdater.getDomainPortIPSetName(category);
-  const tempDomainPortIpset = categoryUpdater.getTempDomainPortIPSetName(category);
-  const domainPortIpset6 = categoryUpdater.getDomainPortIPSetNameForIPV6(category);
-  const tempDomainPortIpset6 = categoryUpdater.getTempDomainPortIPSetNameForIPV6(category);
-
-  const staticDomainPortIpset = categoryUpdater.getDomainPortIPSetName(category, true);
-  const tempStaticDomainPortIpset = categoryUpdater.getTempDomainPortIPSetName(category, true);
-  const staticDomainPortIpset6 = categoryUpdater.getDomainPortIPSetNameForIPV6(category, true);
-  const tempStaticDomainPortIpset6 = categoryUpdater.getTempDomainPortIPSetNameForIPV6(category, true);
-
-  const aggrIpset = categoryUpdater.getAggrIPSetName(category);
-  const aggrIpset6 = categoryUpdater.getAggrIPSetNameForIPV6(category);
-  const staticAggrIpset = categoryUpdater.getAggrIPSetName(category, true);
-  const staticAggrIpset6 = categoryUpdater.getAggrIPSetNameForIPV6(category, true);
-  const allowIpset = categoryUpdater.getAllowIPSetName(category);
-  const allowIpset6 = categoryUpdater.getAllowIPSetNameForIPV6(category);
-
   const cmdCreateCategorySet = `sudo ipset create -! ${ipset} ${dstType} ${dstType === "bitmap:port" ? "range 0-65535" : `family inet hashsize ${hashSize} maxelem 65536 ${commentIndicator}`}`
   const cmdCreateCategorySet6 = `sudo ipset create -! ${ipset6} ${dstType} ${dstType === "bitmap:port" ? "range 0-65535" : `family inet6 hashsize ${hashSize} maxelem 65536 ${commentIndicator}`}`
   const cmdCreateTempCategorySet = `sudo ipset create -! ${tempIpset} ${dstType} ${dstType === "bitmap:port" ? "range 0-65535" : `family inet hashsize ${hashSize} maxelem 65536 ${commentIndicator}`}`
   const cmdCreateTempCategorySet6 = `sudo ipset create -! ${tempIpset6} ${dstType} ${dstType === "bitmap:port" ? "range 0-65535" : `family inet6 hashsize ${hashSize} maxelem 65536 ${commentIndicator}`}`
-  const cmdCreateNetPortCategorySet = `sudo ipset create -! ${netPortIpset} hash:net,port family inet hashsize ${hashSize} maxelem 65536 ${commentIndicator}`
-  const cmdCreateNetPortCategorySet6 = `sudo ipset create -! ${netPortIpset6} hash:net,port family inet6 hashsize ${hashSize} maxelem 65536 ${commentIndicator}`
-  const cmdCreateTempNetPortCategorySet = `sudo ipset create -! ${tempNetPortIpset} hash:net,port family inet hashsize ${hashSize} maxelem 65536 ${commentIndicator}`
-  const cmdCreateTempNetPortCategorySet6 = `sudo ipset create -! ${tempNetPortIpset6} hash:net,port family inet6 hashsize ${hashSize} maxelem 65536 ${commentIndicator}`
-  const cmdCreateDomainPortCategorySet = `sudo ipset create -! ${domainPortIpset} hash:net,port family inet hashsize ${hashSize} maxelem 65536 ${commentIndicator}`
-  const cmdCreateDomainPortCategorySet6 = `sudo ipset create -! ${domainPortIpset6}  hash:net,port family inet6 hashsize ${hashSize} maxelem 65536 ${commentIndicator}`
-  const cmdCreateTempDomainPortCategorySet = `sudo ipset create -! ${tempDomainPortIpset} hash:net,port family inet hashsize ${hashSize} maxelem 65536 ${commentIndicator}`;
-  const cmdCreateTempDomainPortCategorySet6 = `sudo ipset create -! ${tempDomainPortIpset6}  hash:net,port family inet6 hashsize ${hashSize} maxelem 65536 ${commentIndicator}`;
-  const cmdCreateAggrCategorySet = `sudo ipset create -! ${aggrIpset} list:set`;
-  const cmdCreateAggrCategorySet6 = `sudo ipset create -! ${aggrIpset6} list:set`;
-
-
-  const cmdCreateStaticCategorySet = `sudo ipset create -! ${staticIpset} ${dstType} ${dstType === "bitmap:port" ? "range 0-65535" : `family inet hashsize ${hashSize} maxelem 65536 ${commentIndicator}`}`
-  const cmdCreateStaticCategorySet6 = `sudo ipset create -! ${staticIpset6} ${dstType} ${dstType === "bitmap:port" ? "range 0-65535" : `family inet6 hashsize ${hashSize} maxelem 65536 ${commentIndicator}`}`
-  const cmdCreateTempStaticCategorySet = `sudo ipset create -! ${tempStaticIpset} ${dstType} ${dstType === "bitmap:port" ? "range 0-65535" : `family inet hashsize ${hashSize} maxelem 65536 ${commentIndicator}`}`
-  const cmdCreateTempStaticCategorySet6 = `sudo ipset create -! ${tempStaticIpset6} ${dstType} ${dstType === "bitmap:port" ? "range 0-65535" : `family inet6 hashsize ${hashSize} maxelem 65536 ${commentIndicator}`}`
-  const cmdCreateStaticDomainPortCategorySet = `sudo ipset create -! ${staticDomainPortIpset} hash:net,port family inet hashsize ${hashSize} maxelem 65536 ${commentIndicator}`
-  const cmdCreateStaticDomainPortCategorySet6 = `sudo ipset create -! ${staticDomainPortIpset6} hash:net,port family inet6 hashsize ${hashSize} maxelem 65536 ${commentIndicator}`
-  const cmdCreateTempStaticDomainPortCategorySet = `sudo ipset create -! ${tempStaticDomainPortIpset} hash:net,port family inet hashsize ${hashSize} maxelem 65536 ${commentIndicator}`
-  const cmdCreateTempStaticDomainPortCategorySet6 = `sudo ipset create -! ${tempStaticDomainPortIpset6} hash:net,port family inet6 hashsize ${hashSize} maxelem 65536 ${commentIndicator}`
-
-  const cmdCreateStaticAggrCategorySet = `sudo ipset create -! ${staticAggrIpset} list:set`
-  const cmdCreateStaticAggrCategorySet6 = `sudo ipset create -! ${staticAggrIpset6} list:set`
-
-  const cmdCreateAllowCategorySet = `sudo ipset create -! ${allowIpset} list:set`
-  const cmdCreateAllowCategorySet6 = `sudo ipset create -! ${allowIpset6} list:set`
-
-  const cmdAddNet = `sudo ipset add -! ${aggrIpset} ${ipset}; sudo ipset add -! ${aggrIpset} ${staticIpset}`; // add both dynamic and static ipset to category default ipset
-  const cmdAddNetPort = `sudo ipset add -! ${aggrIpset} ${netPortIpset}`;
-  const cmdAddDomainPort = `sudo ipset add -! ${aggrIpset} ${staticDomainPortIpset}`;
-  const cmdAddNet6 = `sudo ipset add -! ${aggrIpset6} ${ipset6}; sudo ipset add -! ${aggrIpset6} ${staticIpset6}`;
-  const cmdAddNetPort6 = `sudo ipset add -! ${aggrIpset6} ${netPortIpset6}`;
-  const cmdAddDomainPort6 = `sudo ipset add -! ${aggrIpset6} ${staticDomainPortIpset6}`;
-
-  const cmdAddStaticNet = `sudo ipset add -! ${staticAggrIpset} ${staticIpset}`; // only add static ipset to category static ipset
-  const cmdAddStaticNetPort = `sudo ipset add -! ${staticAggrIpset} ${netPortIpset}`;
-  const cmdAddStaticDomainPort = `sudo ipset add -! ${staticAggrIpset} ${staticDomainPortIpset}`;
-  const cmdAddStaticNet6 = `sudo ipset add -! ${staticAggrIpset6} ${staticIpset6}`;
-  const cmdAddStaticNetPort6 = `sudo ipset add -! ${staticAggrIpset6} ${netPortIpset6}`;
-  const cmdAddStaticDomainPort6 = `sudo ipset add -! ${staticAggrIpset6} ${staticDomainPortIpset6}`;
-
-  const cmdAddAllowNet = `sudo ipset add -! ${allowIpset} ${ipset}; sudo ipset add -! ${allowIpset} ${staticIpset}`;
-  const cmdAddAllowNet6 = `sudo ipset add -! ${allowIpset6} ${ipset6}; sudo ipset add -! ${allowIpset6} ${staticIpset6}`;
-  const cmdAddAllowNetPort = `sudo ipset add -! ${allowIpset} ${netPortIpset}`;
-  const cmdAddAllowNetPort6 = `sudo ipset add -! ${allowIpset6} ${netPortIpset6}`;
-  const cmdAddAllowDomainport = `sudo ipset add -! ${allowIpset} ${domainPortIpset}; sudo ipset add -! ${allowIpset} ${staticDomainPortIpset}`;
-  const cmdAddAllowDomainport6 = `sudo ipset add -! ${allowIpset6} ${domainPortIpset6}; sudo ipset add -! ${allowIpset6} ${staticDomainPortIpset6}`;
 
   await exec(cmdCreateCategorySet);
   await exec(cmdCreateCategorySet6);
   await exec(cmdCreateTempCategorySet);
   await exec(cmdCreateTempCategorySet6);
-  await exec(cmdCreateNetPortCategorySet);
-  await exec(cmdCreateNetPortCategorySet6);
-  await exec(cmdCreateTempNetPortCategorySet);
-  await exec(cmdCreateTempNetPortCategorySet6);
-  await exec(cmdCreateDomainPortCategorySet);
-  await exec(cmdCreateDomainPortCategorySet6);
-  await exec(cmdCreateTempDomainPortCategorySet);
-  await exec(cmdCreateTempDomainPortCategorySet6);
-  await exec(cmdCreateStaticDomainPortCategorySet);
-  await exec(cmdCreateStaticDomainPortCategorySet6);
-  await exec(cmdCreateTempStaticDomainPortCategorySet);
-  await exec(cmdCreateTempStaticDomainPortCategorySet6);
-
-  await exec(cmdCreateAggrCategorySet);
-  await exec(cmdCreateAggrCategorySet6); 
-
-  await exec(cmdCreateStaticCategorySet);
-  await exec(cmdCreateStaticCategorySet6);
-  await exec(cmdCreateTempStaticCategorySet);
-  await exec(cmdCreateTempStaticCategorySet6);
-
-  await exec(cmdCreateStaticAggrCategorySet);
-  await exec(cmdCreateStaticAggrCategorySet6);
-
-  await exec(cmdCreateAllowCategorySet);
-  await exec(cmdCreateAllowCategorySet6);
-
-  await exec(cmdAddNet);
-  await exec(cmdAddNetPort);
-  await exec(cmdAddDomainPort);
-  await exec(cmdAddNet6);
-  await exec(cmdAddNetPort6);
-  await exec(cmdAddDomainPort6);
-  await exec(cmdAddStaticNet);
-  await exec(cmdAddStaticNetPort);
-  await exec(cmdAddStaticDomainPort);
-  await exec(cmdAddStaticNet6);
-  await exec(cmdAddStaticNetPort6);
-  await exec(cmdAddStaticDomainPort6);
-  await exec(cmdAddAllowNet);
-  await exec(cmdAddAllowNet6);
-  await exec(cmdAddAllowNetPort);
-  await exec(cmdAddAllowNetPort6);
-  await exec(cmdAddAllowDomainport);
-  await exec(cmdAddAllowDomainport6);
+
+  if (!isCountry) { // country does not need following ipsets
+    const staticIpset = categoryUpdater.getIPSetName(category, true);
+    const tempStaticIpset = categoryUpdater.getTempIPSetName(category, true);
+    const staticIpset6 = categoryUpdater.getIPSetNameForIPV6(category, true);
+    const tempStaticIpset6 = categoryUpdater.getTempIPSetNameForIPV6(category, true);
+  
+    const netPortIpset = categoryUpdater.getNetPortIPSetName(category);
+    const tempNetPortIpset = categoryUpdater.getTempNetPortIPSetName(category);
+    const netPortIpset6 = categoryUpdater.getNetPortIPSetNameForIPV6(category);
+    const tempNetPortIpset6 = categoryUpdater.getTempNetPortIPSetNameForIPV6(category);
+  
+    const domainPortIpset = categoryUpdater.getDomainPortIPSetName(category);
+    const tempDomainPortIpset = categoryUpdater.getTempDomainPortIPSetName(category);
+    const domainPortIpset6 = categoryUpdater.getDomainPortIPSetNameForIPV6(category);
+    const tempDomainPortIpset6 = categoryUpdater.getTempDomainPortIPSetNameForIPV6(category);
+  
+    const staticDomainPortIpset = categoryUpdater.getDomainPortIPSetName(category, true);
+    const tempStaticDomainPortIpset = categoryUpdater.getTempDomainPortIPSetName(category, true);
+    const staticDomainPortIpset6 = categoryUpdater.getDomainPortIPSetNameForIPV6(category, true);
+    const tempStaticDomainPortIpset6 = categoryUpdater.getTempDomainPortIPSetNameForIPV6(category, true);
+  
+    const aggrIpset = categoryUpdater.getAggrIPSetName(category);
+    const aggrIpset6 = categoryUpdater.getAggrIPSetNameForIPV6(category);
+    const staticAggrIpset = categoryUpdater.getAggrIPSetName(category, true);
+    const staticAggrIpset6 = categoryUpdater.getAggrIPSetNameForIPV6(category, true);
+    const allowIpset = categoryUpdater.getAllowIPSetName(category);
+    const allowIpset6 = categoryUpdater.getAllowIPSetNameForIPV6(category);
+
+    const cmdCreateNetPortCategorySet = `sudo ipset create -! ${netPortIpset} hash:net,port family inet hashsize ${hashSize} maxelem 65536 ${commentIndicator}`
+    const cmdCreateNetPortCategorySet6 = `sudo ipset create -! ${netPortIpset6} hash:net,port family inet6 hashsize ${hashSize} maxelem 65536 ${commentIndicator}`
+    const cmdCreateTempNetPortCategorySet = `sudo ipset create -! ${tempNetPortIpset} hash:net,port family inet hashsize ${hashSize} maxelem 65536 ${commentIndicator}`
+    const cmdCreateTempNetPortCategorySet6 = `sudo ipset create -! ${tempNetPortIpset6} hash:net,port family inet6 hashsize ${hashSize} maxelem 65536 ${commentIndicator}`
+    const cmdCreateDomainPortCategorySet = `sudo ipset create -! ${domainPortIpset} hash:net,port family inet hashsize ${hashSize} maxelem 65536 ${commentIndicator}`
+    const cmdCreateDomainPortCategorySet6 = `sudo ipset create -! ${domainPortIpset6}  hash:net,port family inet6 hashsize ${hashSize} maxelem 65536 ${commentIndicator}`
+    const cmdCreateTempDomainPortCategorySet = `sudo ipset create -! ${tempDomainPortIpset} hash:net,port family inet hashsize ${hashSize} maxelem 65536 ${commentIndicator}`;
+    const cmdCreateTempDomainPortCategorySet6 = `sudo ipset create -! ${tempDomainPortIpset6}  hash:net,port family inet6 hashsize ${hashSize} maxelem 65536 ${commentIndicator}`;
+    const cmdCreateAggrCategorySet = `sudo ipset create -! ${aggrIpset} list:set`;
+    const cmdCreateAggrCategorySet6 = `sudo ipset create -! ${aggrIpset6} list:set`;
+  
+  
+    const cmdCreateStaticCategorySet = `sudo ipset create -! ${staticIpset} ${dstType} ${dstType === "bitmap:port" ? "range 0-65535" : `family inet hashsize ${hashSize} maxelem 65536 ${commentIndicator}`}`
+    const cmdCreateStaticCategorySet6 = `sudo ipset create -! ${staticIpset6} ${dstType} ${dstType === "bitmap:port" ? "range 0-65535" : `family inet6 hashsize ${hashSize} maxelem 65536 ${commentIndicator}`}`
+    const cmdCreateTempStaticCategorySet = `sudo ipset create -! ${tempStaticIpset} ${dstType} ${dstType === "bitmap:port" ? "range 0-65535" : `family inet hashsize ${hashSize} maxelem 65536 ${commentIndicator}`}`
+    const cmdCreateTempStaticCategorySet6 = `sudo ipset create -! ${tempStaticIpset6} ${dstType} ${dstType === "bitmap:port" ? "range 0-65535" : `family inet6 hashsize ${hashSize} maxelem 65536 ${commentIndicator}`}`
+    const cmdCreateStaticDomainPortCategorySet = `sudo ipset create -! ${staticDomainPortIpset} hash:net,port family inet hashsize ${hashSize} maxelem 65536 ${commentIndicator}`
+    const cmdCreateStaticDomainPortCategorySet6 = `sudo ipset create -! ${staticDomainPortIpset6} hash:net,port family inet6 hashsize ${hashSize} maxelem 65536 ${commentIndicator}`
+    const cmdCreateTempStaticDomainPortCategorySet = `sudo ipset create -! ${tempStaticDomainPortIpset} hash:net,port family inet hashsize ${hashSize} maxelem 65536 ${commentIndicator}`
+    const cmdCreateTempStaticDomainPortCategorySet6 = `sudo ipset create -! ${tempStaticDomainPortIpset6} hash:net,port family inet6 hashsize ${hashSize} maxelem 65536 ${commentIndicator}`
+  
+    const cmdCreateStaticAggrCategorySet = `sudo ipset create -! ${staticAggrIpset} list:set`
+    const cmdCreateStaticAggrCategorySet6 = `sudo ipset create -! ${staticAggrIpset6} list:set`
+  
+    const cmdCreateAllowCategorySet = `sudo ipset create -! ${allowIpset} list:set`
+    const cmdCreateAllowCategorySet6 = `sudo ipset create -! ${allowIpset6} list:set`
+  
+    const cmdAddNet = `sudo ipset add -! ${aggrIpset} ${ipset}; sudo ipset add -! ${aggrIpset} ${staticIpset}`; // add both dynamic and static ipset to category default ipset
+    const cmdAddNetPort = `sudo ipset add -! ${aggrIpset} ${netPortIpset}`;
+    const cmdAddDomainPort = `sudo ipset add -! ${aggrIpset} ${staticDomainPortIpset}`;
+    const cmdAddNet6 = `sudo ipset add -! ${aggrIpset6} ${ipset6}; sudo ipset add -! ${aggrIpset6} ${staticIpset6}`;
+    const cmdAddNetPort6 = `sudo ipset add -! ${aggrIpset6} ${netPortIpset6}`;
+    const cmdAddDomainPort6 = `sudo ipset add -! ${aggrIpset6} ${staticDomainPortIpset6}`;
+  
+    const cmdAddStaticNet = `sudo ipset add -! ${staticAggrIpset} ${staticIpset}`; // only add static ipset to category static ipset
+    const cmdAddStaticNetPort = `sudo ipset add -! ${staticAggrIpset} ${netPortIpset}`;
+    const cmdAddStaticDomainPort = `sudo ipset add -! ${staticAggrIpset} ${staticDomainPortIpset}`;
+    const cmdAddStaticNet6 = `sudo ipset add -! ${staticAggrIpset6} ${staticIpset6}`;
+    const cmdAddStaticNetPort6 = `sudo ipset add -! ${staticAggrIpset6} ${netPortIpset6}`;
+    const cmdAddStaticDomainPort6 = `sudo ipset add -! ${staticAggrIpset6} ${staticDomainPortIpset6}`;
+  
+    const cmdAddAllowNet = `sudo ipset add -! ${allowIpset} ${ipset}; sudo ipset add -! ${allowIpset} ${staticIpset}`;
+    const cmdAddAllowNet6 = `sudo ipset add -! ${allowIpset6} ${ipset6}; sudo ipset add -! ${allowIpset6} ${staticIpset6}`;
+    const cmdAddAllowNetPort = `sudo ipset add -! ${allowIpset} ${netPortIpset}`;
+    const cmdAddAllowNetPort6 = `sudo ipset add -! ${allowIpset6} ${netPortIpset6}`;
+    const cmdAddAllowDomainport = `sudo ipset add -! ${allowIpset} ${domainPortIpset}; sudo ipset add -! ${allowIpset} ${staticDomainPortIpset}`;
+    const cmdAddAllowDomainport6 = `sudo ipset add -! ${allowIpset6} ${domainPortIpset6}; sudo ipset add -! ${allowIpset6} ${staticDomainPortIpset6}`;
+
+    await exec(cmdCreateNetPortCategorySet);
+    await exec(cmdCreateNetPortCategorySet6);
+    await exec(cmdCreateTempNetPortCategorySet);
+    await exec(cmdCreateTempNetPortCategorySet6);
+    await exec(cmdCreateDomainPortCategorySet);
+    await exec(cmdCreateDomainPortCategorySet6);
+    await exec(cmdCreateTempDomainPortCategorySet);
+    await exec(cmdCreateTempDomainPortCategorySet6);
+    await exec(cmdCreateStaticDomainPortCategorySet);
+    await exec(cmdCreateStaticDomainPortCategorySet6);
+    await exec(cmdCreateTempStaticDomainPortCategorySet);
+    await exec(cmdCreateTempStaticDomainPortCategorySet6);
+  
+    await exec(cmdCreateAggrCategorySet);
+    await exec(cmdCreateAggrCategorySet6); 
+  
+    await exec(cmdCreateStaticCategorySet);
+    await exec(cmdCreateStaticCategorySet6);
+    await exec(cmdCreateTempStaticCategorySet);
+    await exec(cmdCreateTempStaticCategorySet6);
+  
+    await exec(cmdCreateStaticAggrCategorySet);
+    await exec(cmdCreateStaticAggrCategorySet6);
+  
+    await exec(cmdCreateAllowCategorySet);
+    await exec(cmdCreateAllowCategorySet6);
+  
+    await exec(cmdAddNet);
+    await exec(cmdAddNetPort);
+    await exec(cmdAddDomainPort);
+    await exec(cmdAddNet6);
+    await exec(cmdAddNetPort6);
+    await exec(cmdAddDomainPort6);
+    await exec(cmdAddStaticNet);
+    await exec(cmdAddStaticNetPort);
+    await exec(cmdAddStaticDomainPort);
+    await exec(cmdAddStaticNet6);
+    await exec(cmdAddStaticNetPort6);
+    await exec(cmdAddStaticDomainPort6);
+    await exec(cmdAddAllowNet);
+    await exec(cmdAddAllowNet6);
+    await exec(cmdAddAllowNetPort);
+    await exec(cmdAddAllowNetPort6);
+    await exec(cmdAddAllowDomainport);
+    await exec(cmdAddAllowDomainport6);
+  }
 }
 
 async function existsBlockingEnv(tag) {
diff --git a/control/CategoryUpdaterBase.js b/control/CategoryUpdaterBase.js
index b10952711..3a84ca53c 100644
--- a/control/CategoryUpdaterBase.js
+++ b/control/CategoryUpdaterBase.js
@@ -268,33 +268,16 @@ class CategoryUpdaterBase {
 
   async recycleIPSet(category) { }
 
-  async swapIpset(category) {
+  async swapIpset(category, isCountry = false) {
     // only dymanic net, and static/dynamic domain:port sets are swapped here
     const ipsetName = this.getIPSetName(category);
     const ipset6Name = this.getIPSetNameForIPV6(category);
     const tmpIPSetName = this.getTempIPSetName(category);
     const tmpIPSet6Name = this.getTempIPSetNameForIPV6(category);
 
-    const domainportIpsetName = this.getDomainPortIPSetName(category);
-    const domainportIpset6Name = this.getDomainPortIPSetNameForIPV6(category);
-    const tmpDomainportIpsetName = this.getTempDomainPortIPSetName(category);
-    const tmpDomainportIpset6Name = this.getTempDomainPortIPSetNameForIPV6(category);
-
-    const staticDomainportIpsetName = this.getDomainPortIPSetName(category, true);
-    const staticDomainportIpset6Name = this.getDomainPortIPSetNameForIPV6(category, true);
-    const tmpStaticDomainportIpsetName = this.getTempDomainPortIPSetName(category, true);
-    const tmpStaticDomainportIpset6Name = this.getTempDomainPortIPSetNameForIPV6(category, true);
-
     // swap temp ipset with ipset
     const swapCmd = `sudo ipset swap ${ipsetName} ${tmpIPSetName}`;
     const swapCmd6 = `sudo ipset swap ${ipset6Name} ${tmpIPSet6Name}`;
-
-    const swapDomainportCmd = `sudo ipset swap ${domainportIpsetName} ${tmpDomainportIpsetName}`;
-    const swapDomainportCmd6 = `sudo ipset swap ${domainportIpset6Name} ${tmpDomainportIpset6Name}`;
-
-    const swapStaticDomainportCmd = `sudo ipset swap ${staticDomainportIpsetName} ${tmpStaticDomainportIpsetName}`;
-    const swapStaticDomainportCmd6 = `sudo ipset swap ${staticDomainportIpset6Name} ${tmpStaticDomainportIpset6Name}`;
-
     await exec(swapCmd).catch((err) => {
       log.error(`Failed to swap ipsets for category ${category}`, err);
     });
@@ -303,31 +286,8 @@ class CategoryUpdaterBase {
       log.error(`Failed to swap ipsets6 for category ${category}`, err);
     });
 
-    await exec(swapDomainportCmd).catch((err) => {
-      log.error(`Failed to swap netport ipsets for category ${category}`, err);
-    });
-
-    await exec(swapDomainportCmd6).catch((err) => {
-      log.error(`Failed to swap netport ipsets6 for category ${category}`, err);
-    });
-
-    await exec(swapStaticDomainportCmd).catch((err) => {
-      log.error(`Failed to swap static netport ipsets for category ${category}`, err);
-    });
-
-    await exec(swapStaticDomainportCmd6).catch((err) => {
-      log.error(`Failed to swap static netport ipsets6 for category ${category}`, err);
-    });
-
     const flushCmd = `sudo ipset flush ${tmpIPSetName}`;
     const flushCmd6 = `sudo ipset flush ${tmpIPSet6Name}`;
-
-    const flushDomainportCmd = `sudo ipset flush ${tmpDomainportIpsetName}`;
-    const flushDomainportCmd6 = `sudo ipset flush ${tmpDomainportIpset6Name}`;
-
-    const flushStaticDomainportCmd = `sudo ipset flush ${tmpStaticDomainportIpsetName}`;
-    const flushStaticDomainportCmd6 = `sudo ipset flush ${tmpStaticDomainportIpset6Name}`;
-
     await exec(flushCmd).catch((err) => {
       log.error(`Failed to flush temp ipsets for category ${category}`, err);
     });
@@ -336,21 +296,61 @@ class CategoryUpdaterBase {
       log.error(`Failed to flush temp ipsets6 for category ${category}`, err);
     });
 
-    await exec(flushDomainportCmd).catch((err) => {
-      log.error(`Failed to flush temp netport ipsets for category ${category}`, err);
-    });
-
-    await exec(flushDomainportCmd6).catch((err) => {
-      log.error(`Failed to flush temp netport ipsets6 for category ${category}`, err);
-    });
-
-    await exec(flushStaticDomainportCmd).catch((err) => {
-      log.error(`Failed to flush temp static netport ipsets for category ${category}`, err);
-    });
-
-    await exec(flushStaticDomainportCmd6).catch((err) => {
-      log.error(`Failed to flush temp static netport ipsets6 for category ${category}`, err);
-    });
+    if (!isCountry) { // country does not have following ipsets, this can greatly save kernel memory usage
+      const domainportIpsetName = this.getDomainPortIPSetName(category);
+      const domainportIpset6Name = this.getDomainPortIPSetNameForIPV6(category);
+      const tmpDomainportIpsetName = this.getTempDomainPortIPSetName(category);
+      const tmpDomainportIpset6Name = this.getTempDomainPortIPSetNameForIPV6(category);
+  
+      const staticDomainportIpsetName = this.getDomainPortIPSetName(category, true);
+      const staticDomainportIpset6Name = this.getDomainPortIPSetNameForIPV6(category, true);
+      const tmpStaticDomainportIpsetName = this.getTempDomainPortIPSetName(category, true);
+      const tmpStaticDomainportIpset6Name = this.getTempDomainPortIPSetNameForIPV6(category, true);
+  
+      const swapDomainportCmd = `sudo ipset swap ${domainportIpsetName} ${tmpDomainportIpsetName}`;
+      const swapDomainportCmd6 = `sudo ipset swap ${domainportIpset6Name} ${tmpDomainportIpset6Name}`;
+  
+      const swapStaticDomainportCmd = `sudo ipset swap ${staticDomainportIpsetName} ${tmpStaticDomainportIpsetName}`;
+      const swapStaticDomainportCmd6 = `sudo ipset swap ${staticDomainportIpset6Name} ${tmpStaticDomainportIpset6Name}`;
+  
+      await exec(swapDomainportCmd).catch((err) => {
+        log.error(`Failed to swap netport ipsets for category ${category}`, err);
+      });
+  
+      await exec(swapDomainportCmd6).catch((err) => {
+        log.error(`Failed to swap netport ipsets6 for category ${category}`, err);
+      });
+  
+      await exec(swapStaticDomainportCmd).catch((err) => {
+        log.error(`Failed to swap static netport ipsets for category ${category}`, err);
+      });
+  
+      await exec(swapStaticDomainportCmd6).catch((err) => {
+        log.error(`Failed to swap static netport ipsets6 for category ${category}`, err);
+      });
+  
+      const flushDomainportCmd = `sudo ipset flush ${tmpDomainportIpsetName}`;
+      const flushDomainportCmd6 = `sudo ipset flush ${tmpDomainportIpset6Name}`;
+  
+      const flushStaticDomainportCmd = `sudo ipset flush ${tmpStaticDomainportIpsetName}`;
+      const flushStaticDomainportCmd6 = `sudo ipset flush ${tmpStaticDomainportIpset6Name}`;
+  
+      await exec(flushDomainportCmd).catch((err) => {
+        log.error(`Failed to flush temp netport ipsets for category ${category}`, err);
+      });
+  
+      await exec(flushDomainportCmd6).catch((err) => {
+        log.error(`Failed to flush temp netport ipsets6 for category ${category}`, err);
+      });
+  
+      await exec(flushStaticDomainportCmd).catch((err) => {
+        log.error(`Failed to flush temp static netport ipsets for category ${category}`, err);
+      });
+  
+      await exec(flushStaticDomainportCmd6).catch((err) => {
+        log.error(`Failed to flush temp static netport ipsets6 for category ${category}`, err);
+      });
+    }
   }
 
   async deleteCategoryRecord(category) {
diff --git a/control/CountryUpdater.js b/control/CountryUpdater.js
index 2be6b4c02..06af678b3 100644
--- a/control/CountryUpdater.js
+++ b/control/CountryUpdater.js
@@ -97,7 +97,7 @@ class CountryUpdater extends CategoryUpdaterBase {
     this.activeCountries[code] = 1
     this.activeCategories[category] = 1
     // use a larger hash size for country ipset since some country ipset may be large and cause performance issue
-    await Block.setupCategoryEnv(category, 'hash:net', 32768);
+    await Block.setupCategoryEnv(category, 'hash:net', 32768, false, true);
 
     sem.emitEvent({
       type: 'Policy:CountryActivated',
@@ -205,7 +205,7 @@ class CountryUpdater extends CategoryUpdaterBase {
 
     await this.addDynamicEntries(category, {useTemp: true});
 
-    await this.swapIpset(category);
+    await this.swapIpset(category, true);
 
     log.info(`Successfully recycled ipset for category ${category}`)
   }
-- 
2.28.0

