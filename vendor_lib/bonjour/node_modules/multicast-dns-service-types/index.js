var prefix = function (name) {
  return '_' + name
}

var defined = function (name) {
  return name
}

exports.stringify = function (data) {
  if (typeof data === 'object' && data && data.name) return exports.stringify(data.name, data.protocol, data.subtypes)
  return Array.prototype.concat.apply([], arguments).filter(defined).map(prefix).join('.')
}

exports.parse = function (str) {
  var parts = str.split('.')

  // protocol index
  const protoIdx = parts.findIndex(p => ['_tcp','_udp'].includes(p))
  const protocol = parts[protoIdx]
  if (protoIdx <= 0) return { domain: str }

  const domain = parts.slice(protoIdx + 1).join('.');
  const name = parts[protoIdx -1]
  parts = parts.slice(0, protoIdx - 1)

  let subtype = null
  if (parts[parts.length - 1] == '_sub') {
    parts.pop()
    subtype = parts.pop()
  }

  const instance = parts.join('.')

  return { instance, subtype, name, protocol, domain }
}

exports.tcp = function (name) {
  return exports.stringify(name, 'tcp', Array.prototype.concat.apply([], Array.prototype.slice.call(arguments, 1)))
}

exports.udp = function (name) {
  return exports.stringify(name, 'udp', Array.prototype.concat.apply([], Array.prototype.slice.call(arguments, 1)))
}
