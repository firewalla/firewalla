{
  "name": "dns-packet",
  "version": "1.1.0",
  "description": "An abstract-encoding compliant module for encoding / decoding DNS packets",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/mafintosh/dns-packet.git"
  },
  "dependencies": {
    "ip": "^1.1.0"
  },
  "devDependencies": {
    "standard": "^6.0.5",
    "tape": "^4.4.0"
  },
  "scripts": {
    "test": "standard && tape test.js"
  },
  "bugs": {
    "url": "https://github.com/mafintosh/dns-packet/issues"
  },
  "homepage": "https://github.com/mafintosh/dns-packet",
  "main": "index.js",
  "keywords": [
    "dns",
    "packet",
    "encodings",
    "encoding",
    "encoder",
    "abstract-encoding"
  ],
  "author": {
    "name": "Mathias Buus"
  },
  "license": "MIT",
  "readme": "# dns-packet\n\nAn [abstract-encoding](https://github.com/mafintosh/abstract-encoding) compliant module for encoding / decoding DNS packets.\nLifted out of [multicast-dns](https://github.com/mafintosh/multicast-dns) as a separate module.\n\n```\nnpm install dns-packet\n```\n\n[![build status](https://travis-ci.org/mafintosh/dns-packet.svg?branch=master)](https://travis-ci.org/mafintosh/dns-packet)\n\n## Usage\n\n``` js\nvar packet = require('dns-packet')\nvar dgram = require('dgram')\n\nvar socket = dgram.createSocket('udp4')\n\nvar buf = packet.encode({\n  type: 'query',\n  id: 1,\n  flags: packet.RECURSION_DESIRED,\n  questions: [{\n    type: 'A',\n    name: 'google.com'\n  }]\n})\n\nsocket.on('message', function (message) {\n  console.log(packet.decode(message)) // prints out a response from google dns\n})\n\nsocket.send(buf, 0, buf.length, 53, '8.8.8.8')\n```\n\n## API\n\n#### `var buf = packets.encode(packet, [buf], [offset])`\n\nEncodes a DNS packet into a buffer.\n\n#### `var packet = packets.decode(buf, [offset])`\n\nDecode a DNS packet from a buffer\n\n#### `var len = packets.encodingLength(packet)`\n\nReturns how many bytes are needed to encode the DNS packet\n\n## Packets\n\nPackets look like this\n\n``` js\n{\n  type: 'query|response',\n  id: optionalIdNumber,\n  flags: optionalBitFlags,\n  questions: [...],\n  answers: [...],\n  additionals: [...],\n  authorities: [...]\n}\n```\n\nThe bit flags available are\n\n``` js\npacket.RECURSION_DESIRED\npacket.RECURSION_AVAILABLE\npacket.TRUNCATED_RESPONSE\npacket.AUTHORITATIVE_ANSWER\npacket.AUTHENTIC_DATA\npacket.CHECKING_DISABLED\n```\n\nTo use more than one flag bitwise-or them together\n\n``` js\nvar flags = packet.RECURSION_DESIRED | packet.RECURSION_AVAILABLE\n```\n\nAnd to check for a flag use bitwise-and\n\n``` js\nvar isRecursive = message.flags & packet.RECURSION_DESIRED\n```\n\nA question looks like this\n\n``` js\n{\n  type: 'A', // or SRV, AAAA, etc\n  name: 'google.com' // which record are you looking for\n}\n```\n\nAnd an answers, additional, or authority looks like this\n\n``` js\n{\n  type: 'A', // or SRV, AAAA, etc\n  name: 'google.com', // which name is this record for\n  ttl: optionalTimeToLiveInSeconds,\n  (record specific data, see below)\n}\n```\n\nCurrently the different available records are\n\n#### `A`\n\n``` js\n{\n  data: 'IPv4 address' // fx 127.0.0.1\n}\n```\n\n#### `AAAA`\n\n``` js\n{\n  data: 'IPv6 address' // fx fe80::1\n}\n```\n\n#### `TXT`\n\n``` js\n{\n  data: Buffer('some text')\n}\n```\n\n#### `NULL`\n\n``` js\n{\n  data: Buffer('any binary data')\n}\n```\n\n#### `SRV`\n\n``` js\n{\n  data: {\n    port: servicePort,\n    target: serviceHostName,\n    priority: optionalServicePriority,\n    weight: optionalServiceWeight\n  }\n}\n```\n\n#### `HINFO`\n\n``` js\n{\n  data: {\n    cpu: 'cpu info',\n    os: 'os info'\n  }\n}\n```\n\n#### `PTR`\n\n``` js\n{\n  data: 'points.to.another.record'\n}\n```\n\n#### `CNAME`\n\n``` js\n{\n  data: 'cname.to.another.record'\n}\n```\n\n#### `DNAME`\n\n``` js\n{\n  data: 'dname.to.another.record'\n}\n```\n\nIf you need another one, open an issue and we'll try to add it.\n\n## License\n\nMIT\n\n",
  "readmeFilename": "README.md",
  "_id": "dns-packet@1.1.0",
  "_shasum": "c11ce43bd9977aa789af72de06b6e4ad6e84730d",
  "_resolved": "https://registry.npmjs.org/dns-packet/-/dns-packet-1.1.0.tgz",
  "_from": "https://registry.npmjs.org/dns-packet/-/dns-packet-1.1.0.tgz"
}
