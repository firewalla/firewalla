#!/usr/bin/env node
'use strict'

process.title = "FireApi"
process.setMaxListeners(0)
require('events').EventEmitter.prototype._maxListeners = 100;

let log = require("../../net2/logger.js")(__filename);

log.info("+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++");
log.info("API Starting ");
log.info("+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++");

let bone = require("../../lib/Bone.js");

let f = require("../../net2/Firewalla.js");

// api/main/monitor all depends on sysManager configuration
let SysManager = require('../../net2/SysManager.js');
let sysManager = new SysManager('info');

log.info("Waiting for cloud token...");

run0();

function run0() {
  if (bone.cloudready()==true &&
      bone.isAppConnected() &&
    // this is to ensure sysManager is already initliazed when called in API code
    sysManager.isConfigInitialized()) {
    log.info("Firewalla initialization complete");
    runLocalAPI();
  } else {
    setTimeout(()=>{
      sysManager.update(null);
      run0();
    },500);
  }
}

let i18n = require('i18n');
const rclient = require('../../util/redis_manager.js').getRedisClient()

let language = 'en';

rclient.hget("sys:config", "language", (err, result) => {
  if(!err && result) {
    language = result;
  }

  log.info("Process is running in language " + language);
  
  i18n.configure({
    directory: __dirname + "/../../locales",
    defaultLocale: language
  });
});



/**
 * Module dependencies.
 */

let config = JSON.parse(require('fs').readFileSync('../net2/config.json', 'utf8'));
let debug = require('debug')('api:server');
let http = require('http');
let port = normalizePort(process.env.PORT || '8833');

let server;
let serverForLocalAPI;

let portForLocalAPI = normalizePort('8834');

function run() {

  const firewallaConfig = require('../../net2/config.js').getConfig();
  sysManager.setConfig(firewallaConfig) // update sys config when start
  
  let app = require('../app');
  app.set('port', port);

  /**
   * Create HTTP server.
   */

  server = http.createServer(app);

  /**
   * Listen on provided port, on all network interfaces.
   */

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
}

run();


function runLocalAPI() {
  let app2 = require('../app-local.js');
  app2.set('port', portForLocalAPI);

  /**
   * Create HTTP server.
   */

  serverForLocalAPI = http.createServer(app2);

  /**
   * Listen on provided port, on all network interfaces.
   */

  if(f.isProductionOrBeta()) {
    serverForLocalAPI.listen(portForLocalAPI, 'localhost')
  } else {
    serverForLocalAPI.listen(portForLocalAPI)
  }

  serverForLocalAPI.on('error', onError);
  serverForLocalAPI.on('listening', onListening);
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

// for non production, just print on console
if((f.isProductionOrBeta())
  && !f.isDocker()) {
  process.on('uncaughtException',(err)=>{
    log.info("################### CRASH #############");
    log.info("+-+-+-",err.message,err.stack);
    if (err && err.message && err.message.includes("Redis connection")) {
      return;
    }
    bone.log("error",{version:config.version,type:'FIREWALLA.UI.exception',msg:err.message,stack:err.stack},null);
    setTimeout(()=>{
      process.exit(1);
    },1000*2);
  });
}

