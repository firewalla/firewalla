#!/usr/bin/env node
/*    Copyright 2016-2020 Firewalla Inc.
 *
 *    This program is free software: you can redistribute it and/or  modify
 *    it under the terms of the GNU Affero General Public License, version 3,
 *    as published by the Free Software Foundation.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU Affero General Public License for more details.
 *
 *    You should have received a copy of the GNU Affero General Public License
 *    along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

'use strict'

process.title = "FireApi"
process.setMaxListeners(0)
require('events').EventEmitter.prototype._maxListeners = 100;

const log = require("../../net2/logger.js")(__filename);

log.info("+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++");
log.info("API Starting ");
log.info("+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++");

// init FireRouter ASAP
const fireRouter = require('../../net2/FireRouter.js')

const sem = require('../../sensor/SensorEventManager.js').getInstance();

const bone = require("../../lib/Bone.js");

const f = require("../../net2/Firewalla.js");

// api/main/monitor all depends on sysManager configuration
const sysManager = require('../../net2/SysManager.js');

const rclient = require('../../util/redis_manager.js').getRedisClient()
const sclient = require('../../util/redis_manager.js').getSubscriptionClient()
const Message = require('../../net2/Message.js');

const http = require('http');
const i18n = require('i18n');

const PORT = normalizePort(process.env.PORT) || 8833;
const PORT_LOCAL_API = 8834;
const apiServers = {}

let language = 'en';

log.info("Waiting for cloud token...");

run0();

function run0() {
  if (bone.cloudready() &&
      bone.isAppConnected() &&
      fireRouter.isReady() &&
      // this is to ensure sysManager is already initliazed when called in API code
      sysManager.isConfigInitialized()) {
    log.info("Firewalla initialization complete");
    run();
  } else {
    setTimeout(()=>{
      sysManager.update(null);
      run0();
    },500);
  }
}

rclient.hget("sys:config", "language", (err, result) => {
  if(!err && result) {
    language = result;
  }

  log.info("Process is running in language " + language);

  i18n.configure({
    directory: __dirname + "/../../locales",
    defaultLocale: language
  });
});

async function run() {
  const app = require('../app.js');
  app.set('port', PORT);

  const appLocal = require('../app-local.js');
  appLocal.set('port', PORT_LOCAL_API);

  refreshListeningInterfaces(app)
  refreshListeningInterfaces(appLocal, true)

  sclient.on("message", (channel, message) => {
    switch (channel) {
      case Message.MSG_SYS_NETWORK_INFO_RELOADED:
      case Message.MSG_SYS_API_INTERFACE_CHANGED:
        log.info('Message received', channel)
        refreshListeningInterfaces(app)
        refreshListeningInterfaces(appLocal, true)
        break
    }
  });

  sclient.subscribe(Message.MSG_SYS_NETWORK_INFO_RELOADED)
  sclient.subscribe(Message.MSG_SYS_API_INTERFACE_CHANGED)
}

// policy:system => apiInterface has higher priority over firerouter interfaces change
// cloud socket should always be available whatever policy:system says
async function refreshListeningInterfaces(app, local = false) {
  log.info('refreshing listening interfaces')

  const userInterfaces = await getUserInterfaces()

  // local api always use monitoring interfaces
  const listeningInterfaces =
    local && f.isProductionOrBetaOrAlpha() ? [] :
    local || !userInterfaces ? sysManager.getMonitoringInterfaces() :
    userInterfaces.map(intf => sysManager.getInterfaceViaUUID(intf))

  // always listen to localhost
  const targetIP4Set = new Set(
    listeningInterfaces
      .filter(intf => intf && intf.ip_address)
      .map(i => i.ip_address)
      .concat('127.0.0.1')
  )

  log.debug(targetIP4Set)

  const port = local ? PORT_LOCAL_API : PORT
  for (const ip in apiServers[port]) {
    if (!targetIP4Set.has(ip)) {
      stopServer(app, ip, port)
    }
  }

  for (const ip of targetIP4Set) {
    createServerAndListen(app, ip, port)
  }
}

// Reading from policy:system directly to decouple from PolicyManager
async function getUserInterfaces() {
  try {
    const policyString = await rclient.hgetAsync('policy:system', 'apiInterface')
    if (!policyString) return null

    const policy = JSON.parse(policyString)
    return policy && policy.state ? policy.interfaces : null
  } catch(err) {
    log.error('Error reading policy:system => apiInterface', err)
    return null
  }
}

function createServerAndListen(app, ip, port) {
  try {
    if (!apiServers[port]) apiServers[port] = {}

    if (apiServers[port][ip]) return

    const server = http.createServer(app);

    log.info(`listen ${app.get('title')} on ${ip}:${port}`)
    server.listen(port, ip);
    server.on('error', onError);


    apiServers[port][ip] = server

  } catch(err) {
    log.error("Error creating FireAPI server", ip, port, err)
  }
}

function stopServer(app, ip, port) {
  try {
    if (!apiServers[port] || !apiServers[port][ip]) return

    log.info(`remove ${app.get('title')} on ${ip}:${port}`)
    apiServers[port][ip].close()
    delete apiServers[port][ip]

  } catch(err) {
    log.error("Error removing", app.get('title'), ip, port, err)
  }
}


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof PORT === 'string'
    ? 'Pipe ' + PORT
    : 'Port ' + PORT;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

// for non production, just print on console
if((f.isProductionOrBeta())
  && !f.isDocker()) {
  process.on('uncaughtException',(err)=>{
    log.info("################### CRASH #############");
    log.info("+-+-+-",err.message,err.stack);
    if (err && err.message && err.message.includes("Redis connection")) {
      return;
    }
    bone.logAsync("error", {
      type: 'FIREWALLA.UI.exception',
      msg: err.message,
      stack: err.stack,
      err: JSON.stringify(err)
    });
    setTimeout(()=>{
      process.exit(1);
    },1000*2);
  });
}

sem.on("ChangeLogLevel", (event) => {
  if(event.name && event.level) {
    if(event.name === "*") {
      require('../../net2/LoggerManager.js').setGlobalLogLevel(event.level);
    } else {
      require('../../net2/LoggerManager.js').setLogLevel(event.name, event.level);
    }
  }
});
